import logging
import sqlite3
from collections import defaultdict
from pprint import pprint

import requests
from telegram.ext import Application, MessageHandler, filters, CommandHandler, ConversationHandler, CallbackQueryHandler
from config import BOT_TOKEN
from telegram import ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup

if open('data/ru_imdb_top_25.csv'):
    pass
else:

    import requests
    import csv

    with open('data/ru_imdb_top_25.csv', 'w', newline='') as csvfile:
        fieldnames = ['film', 'year', 'time', 'rating']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

        writer.writeheader()

        f = open('data/imdb_top_1000.csv')
        title = f.readline()
        i = 1
        for s in f.readlines()[:10]:
            film_inf = list(s.split(','))
            film = film_inf[0]
            headers = {"X-API-KEY": "JS610HH-JHNMHK5-PFJ8M72-RA4VHDH"}

            query = film
            params = {
                'query': query
            }
            response = requests.get(
                'https://api.kinopoisk.dev/v1.4/movie/search',
                headers=headers,
                params=params
            )
            movies = response.json()

            movies1 = movies['docs'][0]
            writer.writerow(
                {'film': movies1['name'], 'year': film_inf[1], 'time': list(film_inf[2].split(' '))[0] + ' –º–∏–Ω—É—Ç',
                 'rating': film_inf[3]})
            print({'film': movies1['name'], 'year': film_inf[1], 'time': list(film_inf[2].split(' '))[0] + ' –º–∏–Ω—É—Ç',
                   'rating': film_inf[3]})

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)
reply_keyboard = [['/search', '/top_films'],
                  ['/favorite', '/help']]
inline_keyboard = [
    [
        InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="1"),
        InlineKeyboardButton("–ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="2"),
    ]]

markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
users = defaultdict()
last_requests = []
bd = sqlite3.connect('data/Films.sqlite')


async def start(update, context):
    user = update.effective_user
    '''await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç {user.mention_html()}! –Ø –±–æ—Ç —Ñ–∏–ª—å–º–æ–≤! üçøüé•‚úÆ‚ãÜÀô –ú–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –ª—é–±–æ–π —Ñ–∏–ª—å–º, –Ω–∞–∂–∞–≤ –∫–æ–º–∞–Ω–¥—É /search -`‚ô°¬¥-",
        reply_markup=markup
    )'''
    caption = rf"–ü—Ä–∏–≤–µ—Ç {user.mention_html()}! –Ø –±–æ—Ç —Ñ–∏–ª—å–º–æ–≤ FILMIX! üçøüé•‚úÆ‚ãÜÀô –ú–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –ª—é–±–æ–π —Ñ–∏–ª—å–º, –Ω–∞–∂–∞–≤ –∫–æ–º–∞–Ω–¥—É /search"
    photo_path = 'data/img.png'
    await update.message.reply_photo(
        photo=open(photo_path, 'rb'),
        caption=caption,
        parse_mode='HTML', reply_markup=markup
    )



async def find_film(update, context):
    await update.message.reply_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏")

    return 1


async def finding(update, context):
    film0 = update.message.text

    headers = {"X-API-KEY": "JS610HH-JHNMHK5-PFJ8M72-RA4VHDH"}

    query = film0
    params = {
        'query': query
    }
    response = requests.get(
        'https://api.kinopoisk.dev/v1.4/movie/search',
        headers=headers,
        params=params
    )
    movies = response.json()

    movies1 = movies['docs'][0]
    pprint(movies1)
    await update.message.reply_text('–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤–≤–∏–¥—É:')
    inf_film = [
        f'üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ - {movies1['name']}',
        f'üé¨ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ —Ñ–∏–ª—å–º–∞ - {movies1['year']}',
        f'üé¨ –°—Ç—Ä–∞–Ω—ã –≤—ã–ø—É—Å–∫–∞: {', '.join([i['name'] for i in movies1['countries']])}',
        f'üé¨ –ñ–∞–Ω—Ä—ã: {', '.join([i['name'] for i in movies1['genres']])}',
        f'üé¨ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å–º–∞ - {movies1['movieLength']} –º–∏–Ω—É—Ç',
        f'üé¨ –ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ 250 - {movies1['top250']}',
        f'üé¨ –û—Ü–µ–Ω–∫–∞ - {movies1['rating']['imdb']}',
        f'üé¨ –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ - {movies1['ageRating']}+\n',
        f'üé• –û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞: {movies1['description'].replace('\xa0', ' ')}'

    ]

    last_requests.append(movies1['name'])
    r = requests.get(movies1['poster']['url'])
    url = r.url
    await update.message.reply_text(url)

    for i in range(50):
        print('--------')
    ans = ''
    for s in inf_film:
        ans += s + '\n'

    reply_markup1 = InlineKeyboardMarkup(inline_keyboard)
    await update.message.reply_text(ans)
    await update.message.reply_text('–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ?', reply_markup=reply_markup1)


async def button(update, context):
    query = update.callback_query
    await query.answer()
    if int(query.data) == 1:
        await query.edit_message_text(
            text=f"–§–∏–ª—å–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ. \n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –º–æ–∂–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ /favorite")
        sqlite_insert_query = """INSERT INTO Users
                                  (username, tgnik, films)
                                  VALUES
                                  (?, ?, ?);"""
        username = list(list(str(update.effective_user).split('id='))[1].split(','))[0]
        tgnik = list(list(str(update.effective_user).split("username='"))[1].split("'"))[0]

        print(tgnik)
        cursor = bd.cursor()
        data_tuple = (username, tgnik, last_requests[-1])
        cursor.execute(sqlite_insert_query, data_tuple)
        bd.commit()

        if username in users:
            users[username].append(last_requests[-1])
        else:
            users[username] = [last_requests[-1]]
        print(users)
    else:
        await query.edit_message_text(text="–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏")

        return 1


async def top_of_films(update, context):
    await update.message.reply_text(
        "–¢–æ–ø 10 —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≤–µ—Ä—Å–∏–∏ IMDB:")
    f = open('data/ru_imdb_top_25.csv')
    top_films = []
    tit = f.readline()
    for film in f.readlines():
        film_i = list(film[:-1].split(','))
        r = f'{film_i[0]}: {film_i[1]} –≥–æ–¥, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - {film_i[2]}, —Ä–µ–π—Ç–∏–Ω–≥ IMDB - {film_i[3]}'
        top_films.append(r)
    ans = ''
    i = 1
    for s in top_films:
        ans += str(i) + '. ' + s + '\n'
        i += 1
        if i == 11:
            break
    await update.message.reply_text(ans)


async def yours_films(update, context):
    await update.message.reply_text("–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã:")
    ans = ''
    cursor = bd.cursor()
    username = list(list(str(update.effective_user).split('id='))[1].split(','))[0]

    result = cursor.execute(f"""SELECT * FROM Users
                WHERE username = ?""", (username,)).fetchall()
    print(result)
    found = []
    if result:
        for fi in result:
            if fi[3] not in found:
                found.append(fi[3])

        i = 1
        for fi in found:
            ans += str(i) + '. ' + fi + '\n'
            i += 1


    else:
        ans = '–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã :('

    await update.message.reply_text(ans)
    print(ans)


async def hz(update, context):
    await update.message.reply_text(
        "—Ö–∑, —á–µ-—Ç–æ —Ç—É—Ç –±—É–¥–µ—Ç")


async def help_command(update, context):
    text = ''
    await update.message.reply_text('''–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ "–§–∏–ª—å–º—ã" üçøüé• 1. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ 
    —Å –±–æ—Ç–æ–º, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É Start –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /start. –ë–æ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å 
    –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.

2. –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã /search ‚Äî –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é. –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ 
–Ω–∞–∑–≤–∞–Ω–∏–µ, –∏ –±–æ—Ç –Ω–∞–π–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ (–≥–æ–¥ –≤—ã–ø—É—Å–∫–∞, –∂–∞–Ω—Ä, —Ä–µ–π—Ç–∏–Ω–≥ –∏ —Ç. –¥.), –∞ —Ç–∞–∫–∂–µ –ø–æ–∫–∞–∂–µ—Ç –ø–æ—Å—Ç–µ—Ä.

/top_films ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–ø-10 —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≤–µ—Ä—Å–∏–∏ IMDB. –ë–æ—Ç –≤—ã–≤–µ–¥–µ—Ç —Å–ø–∏—Å–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏, –≥–æ–¥–∞–º–∏ –≤—ã–ø—É—Å–∫–∞, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∏ 
—Ä–µ–π—Ç–∏–Ω–≥–æ–º.

/favorite ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤. –§–∏–ª—å–º—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞.

/help ‚Äî –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ (—ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è).

/hz ‚Äî –∫–æ–º–∞–Ω–¥–∞ –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ (–Ω–∞ –±—É–¥—É—â–µ–µ).

3. –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞
–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /search.

–ë–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.

–ë–æ—Ç –Ω–∞–π–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç:

–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (–∫–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ").

–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ (–∫–Ω–æ–ø–∫–∞ "–ù–æ–≤—ã–π –ø–æ–∏—Å–∫").

4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ü–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–ª—å–º –≤ –≤–∞—à–µ–º 
—Å–ø–∏—Å–∫–µ. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /favorite.

5. –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /favorite, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤. –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –±–æ—Ç —Å–æ–æ–±—â–∏—Ç –æ–± —ç—Ç–æ–º.

6. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop. –ë–æ—Ç –ø–æ–ø—Ä–æ—â–∞–µ—Ç—Å—è —Å –≤–∞–º–∏.


    ''')


async def stop(update, context):
    await update.message.reply_text("–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!")
    return ConversationHandler.END


def main():
    application = Application.builder().token(BOT_TOKEN).build()
    conv_handler = ConversationHandler(

        entry_points=[CommandHandler('search', find_film)],

        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, finding)],

        },

        # –¢–æ—á–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /stop.
        fallbacks=[CommandHandler('stop', stop)]
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("search", find_film))
    application.add_handler(CommandHandler("top_films", top_of_films))
    application.add_handler(CommandHandler("favorite", yours_films))
    application.add_handler(CommandHandler("hz", hz))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CallbackQueryHandler(button))

    application.run_polling()


if __name__ == '__main__':
    main()
