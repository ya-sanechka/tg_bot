# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã.
import logging

from pprint import pprint

import requests
from telegram.ext import Application, MessageHandler, filters, CommandHandler, ConversationHandler, CallbackQueryHandler
from config import BOT_TOKEN
from telegram import ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)
reply_keyboard = [['/search', '/top_films'],
                  ['/favorite', '/hz']]
inline_keyboard = [
        [
            InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="1"),
            InlineKeyboardButton("–ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="2"),
        ]]

markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)



async def start(update, context):
    user = update.effective_user
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç {user.mention_html()}! –Ø –±–æ—Ç —Ñ–∏–ª—å–º–æ–≤! üçøüé•‚úÆ‚ãÜÀô –ú–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –ª—é–±–æ–π —Ñ–∏–ª—å–º, –Ω–∞–∂–∞–≤ –∫–æ–º–∞–Ω–¥—É /search -`‚ô°¬¥-",
        reply_markup=markup
    )




async def help_command(update, context):
    await update.message.reply_text("—Ç—É—Ç –±—É–¥–µ—Ç —Ç—É—Ç–æ—Ä –ø–æ –±–æ—Ç—É")
async def find_film(update, context):

    await update.message.reply_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏")

    return 1

async def finding(update, context):
    film = update.message.text

    headers = {"X-API-KEY": "QG01J6A-MCEMR61-KPKT65M-FWVD582"}

    query = film
    params = {
        'query': query
    }
    response = requests.get(
        'https://api.kinopoisk.dev/v1.4/movie/search',
        headers=headers,
        params=params
    )
    movies = response.json()

    movies1 = movies['docs'][0]
    pprint(movies)
    await update.message.reply_text('–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤–≤–∏–¥—É:')
    inf_film = [
        f'üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ - {movies1['names'][0]['name']}',
        f'üé¨ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ —Ñ–∏–ª—å–º–∞ - {movies1['year']}',
        f'üé¨ –°—Ç—Ä–∞–Ω—ã –≤—ã–ø—É—Å–∫–∞: {', '.join([i['name'] for i in movies1['countries']])}',
        f'üé¨ –ñ–∞–Ω—Ä—ã: {', '.join([i['name'] for i in movies1['genres']])}',
        f'üé¨ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å–º–∞ - {movies1['movieLength']} –º–∏–Ω—É—Ç',
        f'üé¨ –ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ 250 - {movies1['top250']}',
        f'üé¨ –û—Ü–µ–Ω–∫–∞ - {movies1['rating']['imdb']}',
        f'üé¨ –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ - {movies1['ageRating']}+\n',
        f'üé• –û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞: {movies1['description'].replace('\xa0', ' ')}'

    ]
    r = requests.get(movies1['poster']['url'])
    url = r.url
    await update.message.reply_text(url)




    for i in range(50):
        print('--------')
    ans = ''
    for s in inf_film:
        ans += s + '\n'


    reply_markup1 = InlineKeyboardMarkup(inline_keyboard)
    await update.message.reply_text(ans, reply_markup=reply_markup1)

async def button(update, context):
    """Parses the CallbackQuery and updates the message text."""
    query = update.callback_query

    # CallbackQueries need to be answered, even if no notification to the user is needed
    # Some clients may have trouble otherwise. See https://core.telegram.org/bots/api#callbackquery
    await query.answer()
    if int(query.data) == 1:
        await query.edit_message_text(text=f"–§–∏–ª—å–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ. \n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –º–æ–∂–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ /favotite")
    else:
        await query.edit_message_text(text="–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏")

        return 1


async def top_of_films(update, context):
    await update.message.reply_text(
        "—Ç—É—Ç –±—É–¥—É—Ç —Ç–æ–ø—ã —Ñ–∏–ª—å–º–æ–≤")


async def yours_films(update, context):
    await update.message.reply_text("–≤–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã")





async def hz(update, context):
    await update.message.reply_text(
        "—Ö–∑, —á–µ-—Ç–æ —Ç—É—Ç –±—É–¥–µ—Ç")

async def stop(update, context):
    await update.message.reply_text("–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!")
    return ConversationHandler.END

def main():

    application = Application.builder().token(BOT_TOKEN).build()
    conv_handler = ConversationHandler(

        entry_points=[CommandHandler('search', find_film)],

        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, finding)],

        },

        # –¢–æ—á–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /stop.
        fallbacks=[CommandHandler('stop', stop)]
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("search", find_film))
    application.add_handler(CommandHandler("top_films", top_of_films))
    application.add_handler(CommandHandler("favorite", top_of_films))
    application.add_handler(CommandHandler("hz", hz))
    application.add_handler(CallbackQueryHandler(button))

    application.run_polling()


if __name__ == '__main__':
    main()
